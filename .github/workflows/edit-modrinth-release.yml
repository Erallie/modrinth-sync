name: Edit Modrinth Release

on:
    release:
        types: [edited]

jobs:
    edit-modrinth:
        runs-on: ubuntu-latest

        steps:
          - name: Get release metadata
            env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
                echo "Fetching release info..."
                api_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}"
                release_info=$(curl -s -H "Authorization: token $GH_TOKEN" "$api_url")

                echo "$release_info" | jq -r '.body' > changelog.txt
                echo "RELEASE_NAME=$(echo "$release_info" | jq -r '.name')" >> $GITHUB_ENV
                echo "RELEASE_TAG=$(echo "$release_info" | jq -r '.tag_name')" >> $GITHUB_ENV
                echo "IS_PRERELEASE=$(echo "$release_info" | jq -r '.prerelease')" >> $GITHUB_ENV
                echo "IS_LATEST=$(echo "$release_info" | jq -r '.is_latest')" >>      $GITHUB_ENV

          - name: Find Modrinth version ID
            env:
                MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
            run: |
                echo "Looking for Modrinth version with tag: $RELEASE_TAG"

                PROJECT_ID="zE5EbgF4"
                VERSION_DATA=$(curl -s -H "Authorization: $MODRINTH_TOKEN" https://api.modrinth.com/v2/project/$PROJECT_ID/version)
                VERSION_JSON=$(echo "$VERSION_DATA" | jq -r --arg TAG "$RELEASE_TAG" '.[] | select(.version_number == $TAG)')

                if [ -z "$VERSION_JSON" ]; then
                    echo "❌ No Modrinth release found for tag $RELEASE_TAG"
                    exit 1
                fi

                VERSION_ID=$(echo "$VERSION_JSON" | jq -r '.id')
                echo "VERSION_ID=$VERSION_ID" >> $GITHUB_ENV

          - name: Prepare update payload
            run: |
                changelog=$(cat changelog.txt)

                if [[ "$IS_PRERELEASE" == "true" ]]; then
                    echo "🔶 Prerelease detected — setting to beta and not featured"
                    channel="beta"
                    featured=false
                else
                    channel="release"
                    if [[ "$IS_LATEST" == "true" ]]; then
                        echo "🌟 Latest release — setting as featured"
                        featured=true
                    else
                        echo "ℹ️ Not latest — not featured"
                        featured=false
                    fi
                fi

                jq -Rs --arg name "$RELEASE_NAME" \
                    --arg channel "$channel" \
                    --argjson featured "$featured" \
                    '{
                        name: $name,
                        changelog: .,
                        release_channel: $channel,
                        featured: $featured
                    }' < changelog.txt > update.json

          - name: Patch Modrinth version info
            env:
                MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
            run: |
                echo "Sending PATCH request to update Modrinth release..."

                response=$(curl -s -w "\n%{http_code}" -X PATCH https://api.modrinth.com/v2/version/$VERSION_ID \
                    -H "Authorization: $MODRINTH_TOKEN" \
                    -H "Content-Type: application/json" \
                    --data @update.json)

                body=$(echo "$response" | head -n -1)
                status=$(echo "$response" | tail -n 1)

                echo "Response Status: $status"

                if [[ "$status" -ge 200 && "$status" -lt 300 ]]; then
                    echo "✅ Successfully updated Modrinth release!"
                else
                    echo "❌ Failed to update release (status $status)"
                    if command -v jq &> /dev/null; then
                        echo "$body" | jq
                    else
                        echo "$body"
                    fi
                    exit 1
                fi
