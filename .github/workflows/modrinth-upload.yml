name: Upload to Modrinth

on:
    release:
        types: [published]

jobs:
    upload-to-modrinth:
        runs-on: ubuntu-latest

        steps:
          - name: Get JAR asset name from release
            id: get-jar
            env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
                echo "Fetching release info..."
                api_url="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}"
                release_info=$(curl -s -H "Authorization: token $GH_TOKEN" "$api_url")
                
                echo "$release_info" | jq -r '.body' > changelog.txt

                jar_name=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".jar")) | .name' | head -n 1)

                if [ -z "$jar_name" ]; then
                    echo "No .jar asset found in release!"
                    exit 1
                fi

                echo "ASSET_NAME=$jar_name" >> $GITHUB_ENV

          - name: Download the JAR from the release
            env:
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
                echo "Downloading asset: $ASSET_NAME"
                asset_id=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} | jq '.assets[] | select(.name=="'"$ASSET_NAME"'") | .id')
                curl -L -H "Authorization: token $GH_TOKEN" -H "Accept: application/octet-stream" \
                    "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id" \
                    -o "$ASSET_NAME"

          - name: Prepare Modrinth metadata
            run: |
                prerelease=${{ github.event.release.prerelease }}
                if [ "$prerelease" = "true" ]; then
                    echo "üî∂ Prerelease detected ‚Äî setting to beta and not featured"
                    channel="beta"
                    featured=false
                else
                    channel="release"
                    if [[ "$IS_LATEST" == "true" ]]; then
                        echo "üåü Latest release ‚Äî setting as featured"
                        featured=true
                    else
                        echo "‚ÑπÔ∏è Not latest ‚Äî not featured"
                        featured=false
                    fi
                fi                

                jq -Rs \
                --arg name "${{ github.event.release.name }}" \
                --arg version "${{ github.ref_name }}" \
                --arg file "$ASSET_NAME" \
                --arg channel "$channel" \
                --argjson featured "$featured" \
                '{
                    name: $name,
                    version_number: $version,
                    project_id: "zE5EbgF4",
                    game_versions: ["1.21", "1.21.1", "1.21.2", "1.21.3", "1.21.4"],
                    loaders: ["spigot", "paper", "purpur"],
                    featured: $featured,
                    release_channel: $channel,
                    changelog: .,
                    dependencies: [],
                    file_parts: [$file]
                }' < changelog.txt > version.json

          - name: Upload to Modrinth via API
            env:
                MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
            run: |
                set -e

                echo "Uploading to Modrinth..."

                max_retries=3
                attempt=1
                sleep_time=5

                while [ "$attempt" -le "$max_retries" ]; do
                    echo "Attempt $attempt of $max_retries"

                    response=$(curl -s -w "\n%{http_code}" -X POST https://api.modrinth.com/v2/version \
                        -H "Authorization: $MODRINTH_TOKEN" \
                        -H "Content-Type: multipart/form-data" \
                        -F "data=@version.json;type=application/json" \
                        -F "file=@$ASSET_NAME;type=application/java-archive")

                    body=$(echo "$response" | head -n -1)
                    status=$(echo "$response" | tail -n 1)

                    echo "Response Status: $status"

                    if [[ "$status" -eq 200 || "$status" -eq 201 ]]; then
                        echo "‚úÖ Successfully uploaded to Modrinth!"
                        break
                    elif [[ "$status" -ge 500 ]]; then
                        echo "üîÅ Server error ($status), retrying in $sleep_time seconds..."
                        sleep "$sleep_time"
                        attempt=$((attempt + 1))
                        continue
                    else
                        echo "‚ùå Upload failed with status $status"
                        echo "üîç Modrinth Error:"

                        if command -v jq &> /dev/null; then
                            echo "$body" | jq
                        else
                            echo "$body"
                        fi

                        exit 1
                    fi
                done

                if [[ "$attempt" -gt "$max_retries" ]]; then
                    echo "‚ùå Upload failed after $max_retries attempts. Giving up."
                    exit 1
                fi

